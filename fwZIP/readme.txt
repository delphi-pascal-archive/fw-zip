FWZip версия 1.0.1 от 4 марта 2011 года.
Автор: Александр (Rouse_) Багель
http://rouse.drkb.ru
maito: rouse79@yandex.ru

0. В качестве вступления:

  В последнее время по работе я часто начал сталкиваться с задачами требующими работу с архивами. 
  Формат архива для решения задач был выбран самый распространенный - ZIP и я начал искать уже реализованные сторонние классы для работы с архивами в этом формате.
  Изначально требования были просты: мне требовался компонент (набор классов) который не тянул бы за собой сторонние библиотеки.
  Таких компонентов нашлось достаточно много. 
  Но потом задачи стали усложнятся и соответственно требования к компонентам изменились.
  Через какое-то время мне нужен был компонент умеющий паковать и распаковывать файлы больших размеров.
  Еще через какое-то время потребовалось чтобы при этом он не отьедал почти всю память у приложения.  
  В конце концов мне потребовалось что бы он умел работать с зашифрованными архивами,
  плюс до кучи (т.к. работать приходится в основном с XML - т.е. текстом) чтобы он поддерживал алгоритм сжатия PPMD.
  В итоге у меня остался один более-менее приемлимый вариант, но стоящий 400 долларов и не умеющий PPMD (sic).
  Пришлось делать все самому (правда PPMD еще не добавлен, но скоро - очень скоро)...
  
1. Возможности библиотеки:

  Набор классов FWZip предназначен для создания и распаковки ZIP архивов с методами сжатия Store и Deflate.
  
  В данный момент поддерживаются следующие расширенные элементы спецификации:
    - поддержка ZIP64 расширения
    - поддержка DataDescryptors
    - поддержка криптографии по методу PKWARE
    - поддержка расширенного блока данных с NTFS аттрибутами
	
  Не поддерживаемые элементы спецификации (реализации части из них я не смог встретить ни в одном архиваторе):
    - не поддерживаются следующие алгоритмы сжатия Shrunk, ReducedХ, Imploded, TCA, Deflate64, PKWAREхх, BZIP2
    - не поддерживаются методы усиленной криптографии
    - не поддерживаются многотомные архивы
    - не поддерживается шифрование CentralDirectory
	
  Вкратце - все что может сделать WinRar при создании ZIP архива, данный набор классов умеет.

2. Список изменений:

  1.0 (от 22 февраля 2011 года): 
  
    - первичный релиз
	
  1.0.1 (от 4 марта 2011 года):
  
    - поправлены некоторые глюки. 
	  Спасибо ребятам с форума www.delphimaster.ru 
	  (Дмитрий Тимохов, Riply, И. Павел, clickmaker, Гость, Думкин, Dennis I. Komarov, han_malign, brother, Sergey Masloff, antonn)
    - убрана проверка на уникальность имен в архиве
	- добавлена проверка на длину пути
	- убрана критическая секция в классе TFWZipReader. Т.к. паралельная распаковка в текущем варианте всеравно не возможна, то смысла морозить потоки я не вижу.
	- структура TFWZipWriterItem переделана в виде класса, как следствие убрана функция ReplaceItem
	- к классам TFWZipReaderItem и TFWZipWriterItem добавлено свойство Tag
	- исправлена ошибка деления на ноль в обработчике OnProgress возникающая при попытка сжать файл нулевого размера.
	- добавлена работа с блоком ExData каждого элемента (см. демо UseExDataBlob)

3. Описание файлов:

  - .\FWZipConsts.pas - Типы и константы используемые для работы с ZIP архивами
  - .\FWZipCrc32.pas - Набор функций для рассчета контрольной суммы блока данных
  - .\FWZipCrypt.pas - Реализация криптографии по методу PKWARE
  - .\FWZipReader.pas - Набор классов для распаковки ZIP архива
  - .\FWZipSettings.inc - Модуль настроек проекта
  - .\FWZipStream.pas - Вспомогательный стрим для поддержки шифрования на лету и усеченного заголовка ZLib
  - .\FWZipWriter.pas - Класс для создания ZIP архива
  - .\Demos\ - папки с демонстрационными примерами
  - .\Demos\Create ZIP 1\CreateZIPDemo1.dpr - Демонстрация создания архива используя различные варианты добавления данных
  - .\Demos\Create ZIP 2\CreateZIPDemo2.dpr - Демонстрация создания архива и изменения добавленных записей
  - .\Demos\Extract ZIP 1\ExctractZIPDemo1.dpr - Демонстрация распаковки архива.
  - .\Demos\Extract ZIP 2\ExctractZIPDemo2.dpr - Демонстрация распаковки зашифрованного архива.
  - .\Demos\Use ZIP ExData\UseExDataBlob.dpr - Демонстрация работы с блоком ExData каждого элемента архива.
  - .\Demos\PerfomanceTest\ - папка с проектом тестировщика производительности.
  - .\Demos\DemoResults\ - папка создается при работе демонстрационных примеров.
  
4. Создание архива:

Для создания архива применяется класс TFWZipWriter.
Порядок действий:
  - создать TFWZipWriter
  - при помощи методов AddFileOrFolder/AddStream/AddFiles/AddFolder указать содержимое будующего архива.
  - выполнить тонкую настройку каждого элемента при помощи изменения свойств класса TFWZipWriterItem
  - при необходимости удалить лишние элементы вызовом метода DeleteItem
  - установить коментарий к архиву
  - по необходимости назначить обработчик OnProgress
  - по необходимости назначить обработчик OnSaveExData
  - вызвать метод BuildZip	
  - разрушить TFWZipWriter
  
5. Распаковка архива:

Для распаковки архива применяется класс TFWZipReader
Порядок действий:
  - создать TFWZipReader
  - открыть архив вызовом методов LoadFromFile/LoadFromStream
  - по необходимости назначить обработчик OnProgress
  - автоматическая распаковка всего архива:
	- если архив зашифрован, то передать список паролей свойству PasswordList или назначить обработчик OnPassword
	- если предполагается работа с блоком ExData назначить обработчик OnLoadExData
	- по необходимости назначить обработчик OnExeption. В нем вы будете принимать решение, продолжать распаковку архива при исключении или прервать.
	- вызвать метод ExtractAll
  - ручная распаковка поэлементно:
    - выбрать необходимый элемент архива при помощи TFWZipReader.Item[Index] и вызвать метод Extract/ExtractToStream
	- если предполагается работа с блоком ExData назначить обработчик OnLoadExData выбранному элементу
	- если Extract/ExtractToStream вернул erNeedPassword, повторить вызов метода при этом указав верный пароль
  - разрушить TFWZipReader
  
6. Планируемые расширения классов:

В ближайшем будующем планируется добавить поддержку многотомных архивов, и NTFS стримов (ExDataTag = $0E, в принципе вы и сами можете ее добаить работая с обработчиками блока ExData вынесенными наружу).
Так-же планируется поддержка X.509 сертификатов и следующих методов сжатия (BZIP2, LZMA, PPMD). 
Но, т.к. данный набор классов пишется под себя, то данные расширения будут добавлены только по мере их необходимости в моей основной работе.

7. Производительность:

  - перед созданием архива резервируется память под CentralDirectory = SizeOf(TCentralDirectoryFileHeaderEx) * количество элементов архива.
  - средний объем используемой памяти при сжатии 400кб, в пиках до полумегобайта.
  - средний объем используемой памяти при распаковке 100Кб, в пиках до 160кб.
  Тестирование производилось из рассчета сжатия файла с диска напрямую в архив, и извлечение напрямую из архива в файл на диске. 
  При использовании промежуточных стримов - размер памяти естественно увеличится.
  
  Результаты нагрузочных тестов (уровень сжатия clDefault):
  
  - сжималось 3 файла по 3 6 и 9 гигабайт:
	(тестировалось использование ZIP64 расширения из-за превышения по размеру элементов)
    - размер CentralDirectory: 378 байт
    - количество элементов: 3
	- общий обьем данных: 18,989,302,272 байт (~17 гигабайт)
    - время сжатия: 30 минут
	- средний расход памяти при сжатии: 396,085 байт
	- пиковый расход памяти при сжатии: 396,099 байт
	- время распаковки: 15 минут
	- средний расход памяти при распаковке: 170,413 байт
	- пиковый расход памяти при распаковке: 170,420 байт

  - сжималась папка Program Files со старого диска с установленной Windows XP, все элементы шифровались паролем "qwe":
	(тестировалось использование ZIP64 расширения из-за превышения по кол-ву элементов + использование дескрипторов)	
    - размер CentralDirectory: 11,264,400 байт (~10 мегабайт)
    - количество элементов: 89,400 
	- общий обьем данных: 43,748,481,918 байт (~40 гигабайт)
    - время сжатия: 1 час 56 минут
	- средний расход памяти при сжатии: 403,953 байт
	- пиковый расход памяти при сжатии: 413,636 байт
	- время распаковки: 40 минут
	- средний расход памяти при распаковке: 158,419 байт
	- пиковый расход памяти при распаковке:	172,628 байт

8. Технические нюансы:

Не реализована возможность модификации ранее созданного архива. Т.к. при изменении файлов в архиве или их свойств необходимо произвести полную пересборку архива - я посчитал наличие данного функцианала избыточным.

При формировании архива блок ExData не пишется в LocalDirectory (по спецификации его наличие там не обязательно, хотя он и может там присутствовать). 
Т.к. этот-же блок присутствует в CentralDirectory, то я посчитал не оптимальным увеличивать размер архива излишним дубляжом информации.

При шифровании файлов в архиве желательно включать DataDescryptors для каждого зашифрованного элемента (состояние данного флага по умолчанию указывается в конструкторе класса TFWZipWriter).
Дело в том, что при шифровании необходимо сгенерировать заголовок инициализации ключа, в создании которого принимает контрольная сумма файла или (при включенных DataDescryptors) время модицикации файла.
Если не указать DataDescryptors то придется зачитывать файл два раза. Первый раз перед генерацией криптозаголовка для получения CRC32, второй раз уже непосредственно при упаковке файла. Таким образом время формирования зашифрованного архива с отключенными DataDescryptors в два раза больше чем с включенными. Сама-же контрольная сумма рассчитается в любом случае на лету при сжатии данных.

Если шифрование не используется, то DataDescryptors желательно отключить, с целью экономии 20 байт на каждый элемент архива.

Сохранение сжатого файла в архив сделано немного не оптимально.
По условию при сжатии методом Deflate, реализуемым ZLib-ом нужно отсекать ZLibHeader размером в два байта.
Я не стал излишне заморачиваться и сделал следующим образом, сначала пишем весь сжатый стрим по его оффсету минус 2 байта, а потом пишем поверх имя файла (ну или EncryptedFileHeader) затирая эти два байта.
Исправить можно немного переписав TFWZipItemStream, но чес слово, лениво сильно :) 
Кто хочет - пусть сделает.